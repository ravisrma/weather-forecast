name: CI/CD Workflow

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Set environment variables
        run: |
          echo "ECR_REPOSITORY=weather-forecast-prod-ecr" >> "$GITHUB_ENV"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Configure AWS credentials
        id: aws_credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push the Docker image with a simplified name
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        working-directory: ./weather-app

    outputs:
      IMAGE: ${{ steps.build-image.outputs.IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set environment variables
        run: |
          echo "ECS_CLUSTER=weather-forecast-prod-cluster" >> "$GITHUB_ENV"
          echo "ECS_SERVICE=weather-forecast-prod-ecs-service" >> "$GITHUB_ENV"
          echo "CONTAINER_NAME=weather-forecast-prod-container" >> "$GITHUB_ENV"
          echo "ECR_REPOSITORY=weather-forecast-prod-ecr" >> "$GITHUB_ENV"
          echo "ECS_TASK_DEFINITION=weather-forecast-task" >> "$GITHUB_ENV"

      - name: Configure AWS credentials
        id: aws_credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > ${{ env.ECS_TASK_DEFINITION }}.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: Task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy Amazon ECS task definition
        id: deploy-frontend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.Task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # on-failure:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.workflow_run.conclusion == 'failure' }}
  #   steps:

